@precedence {
  unary

  range @right
  dot
  index
  slice
  call

  mult @left
  add @left
  compare @left
  and @left
  or @left

  pipe @left
  ternary @right
}

@top Expr { VarDecl* expr* }

@skip { space | LineComment | BlockComment }

DefName { identifier ~identifier }
VarName { identifier ~identifier }
FieldName { identifier ~identifier }

VarDecl { kw<"let"> DefName "=" expr ";" }

expr[@isGroup=Expr] {
  Number |
  String |
  Bool { @specialize<identifier, "true" | "false"> } |
  Nil { kw<"nil"> } |

  VarName |
  SelectorExpr { expr !dot ~dot "." FieldName } |
  OptionalSelectorExpr { expr "?." FieldName } |

  Pointer |
  PointerSelectorExpr { !dot ~dot "." FieldName } |

  ParenthesizedExpr |

  Array { "[" commaSep<expr> "]" } |
  Map { "{" commaSep<Pair> "}" } |

  IndexExpr { expr !index "[" expr "]" } |
  SliceExpr { expr !slice "[" expr? ":" expr? "]" } |
  RangeExpr { expr !range range expr } |

  CallExpr  { expr !call Arguments } |
  PipeExpr  { expr !pipe ~pipe "|" expr } |

  UnaryExpr {(ArithmeticOp<"+" | "-"> | LogicOp<"!" | kw<"not">>) !unary expr} |
  BinaryExpr {
    expr !mult ArithmeticOp<"*" | "/" | "%" | "^" | "**"> expr |
    expr !add ArithmeticOp<"+" | "-"> expr |
    expr !compare CompareOp<
      "==" | "!=" | "<" | "<=" | ">" | ">=" |
      kw<"in"> | kw<"not"> kw<"in"> |
      kw<"contains"> | kw<"not"> kw<"contains"> |
      kw<"startsWith"> |  kw<"not"> kw<"startsWith"> |
      kw<"endsWith"> |  kw<"not"> kw<"endsWith"> |
      kw<"matches"> | kw<"not"> kw<"matches">
    > expr |
    expr !and LogicOp<"&&" | kw<"and">> expr |
    expr !or LogicOp<"||" | "??" | kw<"or">> expr
  } |

  ConditionalExpr { expr !ternary "?" expr ":" expr }
}

ParenthesizedExpr { "(" expr ")" }

Pair { (String | Number | FieldName | ParenthesizedExpr) ":" expr }

Arguments { "(" commaSep<expr | Block<expr> | Predicate | Block<Predicate>> ")"  }
Predicate[@isGroup=Expression] { VarDecl+ expr }
Block[@isGroup=Expr]<expr> { "{" expr "}" }

kw<term> { @specialize[@name={term}]<identifier, term> }

commaSep<expr> { (expr ~ids ("," expr ~ids)*)? ","? }

LogicOp<expr> { expr }
ArithmeticOp<expr> { expr }
CompareOp<expr> { expr }

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

@skip {} {
  BlockComment[isolate] { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}


@external tokens operatorToken from "./tokens.js" { range }

@tokens {
  space { $[ \t\n\r]+ }
  LineComment[isolate] { "//" ![\n]* }
  @precedence { LineComment "/" }

  digits { @digit ("_"? @digit)* }

  decimalNumber { ("." digits | digits ("." digits?)?) ($[eE] $[+-]? digits)? }
  hexNumber { "0" $[xX] ("_"? (@digit | $[a-fA-F]))+ }
  octNumber { "0" $[oO] ("_"? $[0-7])+ }
  binNumber { "0" $[bB] ("_"? $[01])+ }
  Number { (decimalNumber | hexNumber | octNumber | binNumber) }

  String[isolate] {
    "'" ("\\" _ | ![\\'\n])* "'"? |
    '"' ("\\" _ | ![\\"\n])* '"'? |
    '`' ![`]* '`'
  }

  letter { $[_a-zA-Z\u{a1}-\u{10ffff}] }
  identifier { letter (letter | @digit)* }

  Pointer { "#" identifier? }

  @precedence { Number identifier }
  @precedence { Number "." }

  "=" ";" ":" ".." "." "?." "," "~" "|"
  "(" ")"
  "{" "}"
  "[" "]"
}

@external propSource exprHighlighting from "./highlight.js"

@detectDelim