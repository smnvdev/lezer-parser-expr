# Strings

"Hello\nWorld"
`Hello
World`

==>

Expr(String, String)

# Operators • Arithmetic

1 + 2
1 - 2
1 * 2
1 / 2
1 % 2
1 ^ 2
1 ** 2

==>

Expr(
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
  BinaryExpr(Integer,ArithmeticOp,Integer),
)

# Operators • Comparison

1 == 2
1 != 2
1 < 2
1 > 2
1 <= 2
1 >= 2

==>

Expr(
  BinaryExpr(Integer,CompareOp,Integer),
  BinaryExpr(Integer,CompareOp,Integer),
  BinaryExpr(Integer,CompareOp,Integer),
  BinaryExpr(Integer,CompareOp,Integer),
  BinaryExpr(Integer,CompareOp,Integer),
  BinaryExpr(Integer,CompareOp,Integer)
)

# Operators • Logical

not expr
!expr
expr and other
expr && other
expr or other
expr || other

==>


Expr(
  UnaryExpr(LogicOp(not),VarName),
  UnaryExpr(LogicOp,VarName),
  BinaryExpr(VarName,LogicOp(and),VarName),
  BinaryExpr(VarName,LogicOp,VarName),
  BinaryExpr(VarName,LogicOp(or),VarName),
  BinaryExpr(VarName,LogicOp,VarName)
)

# Operators • Conditional

author.User != nil ? author.User.Name : "Anonymous"
author.User?.Name ?? "Anonymous"

==>

Expr(
  ConditionalExpr(
    BinaryExpr(SelectorExpr(VarName, FieldName), CompareOp, Nil(nil)),
    SelectorExpr(SelectorExpr(VarName, FieldName), FieldName),
    String
  ),
  BinaryExpr(
    OptionalSelectorExpr(SelectorExpr(VarName, FieldName), FieldName),
    LogicOp,
    String
  )
)

# Operators • String & Regex

"str" + "str"
"str" contains "tr"
"str" startsWith "st"
"str" endsWith "tr"
"str" matches "st"

==>

Expr(
  BinaryExpr(String, ArithmeticOp, String),
  BinaryExpr(String, CompareOp(contains), String),
  BinaryExpr(String, CompareOp(startsWith), String),
  BinaryExpr(String, CompareOp(endsWith), String),
  BinaryExpr(String, CompareOp(matches), String)
)

# Operators • Membership Operator

user.Name
user["Name"]

array[0]
array[-1]

"John" in ["John", "Jane"]
"name" in {"name": "John", "age": 30}

author.User?.Name
author.User?.Name ?? "Anonymous"

==>

Expr(
  SelectorExpr(VarName, FieldName),
  IndexExpr(VarName, String),
  IndexExpr(VarName, Integer),
  IndexExpr(VarName, UnaryExpr(ArithmeticOp,Integer)),
  BinaryExpr(String, CompareOp(in), Array(String, String)),
  BinaryExpr(String, CompareOp(in), Map(Pair(String, String), Pair(String, Integer))),
  OptionalSelectorExpr(SelectorExpr(VarName, FieldName), FieldName),
  BinaryExpr(
     OptionalSelectorExpr(SelectorExpr(VarName, FieldName), FieldName),
     LogicOp,
     String
  )
)

# Operators • Slice Operator

array[1:4] == [2, 3, 4]
array[1:-1] == [2, 3, 4]
array[:3] == [1, 2, 3]
array[3:] == [4, 5]
array[:] == array

==>

Expr(
  BinaryExpr(SliceExpr(VarName, Integer, Integer),  CompareOp, Array(Integer, Integer, Integer)),
  BinaryExpr(SliceExpr(VarName, Integer, UnaryExpr(ArithmeticOp, Integer)),  CompareOp, Array(Integer, Integer, Integer)),
  BinaryExpr(SliceExpr(VarName, Integer), CompareOp, Array(Integer, Integer, Integer)),
  BinaryExpr(SliceExpr(VarName, Integer), CompareOp, Array(Integer, Integer)),
  BinaryExpr(SliceExpr(VarName), CompareOp, VarName)
)

# Operators • Pipe Operator

user.Name | lower() | split(" ")

==>

Expr(
  PipeExpr(
    PipeExpr(
      SelectorExpr(VarName, FieldName),
      CallExpr(VarName, Arguments)
    ),
    CallExpr(VarName, Arguments(String))
  )
)

# Operators • Range Operator

1..3 == [1, 2, 3]

==>

Expr(BinaryExpr(RangeExpr(Integer, Integer), CompareOp, Array(Integer, Integer, Integer)))

# Variables • Inline

let x = 42; x * 2

==>

Expr(VarDecl(let, DefName, Integer), BinaryExpr(VarName, ArithmeticOp, Integer))

# Variables

let x = 42;
let y = 2;
x * y

==>

Expr(
  VarDecl(let, DefName, Integer),
  VarDecl(let, DefName, Integer),
  BinaryExpr(VarName, ArithmeticOp, VarName),
)

# Variables • Variable with pipe operator

let name = user.Name | lower() | split(" ");
"Hello, " + name[0] + "!"

==>

Expr(
  VarDecl(
    let,
    DefName,
    PipeExpr(
      PipeExpr(
        SelectorExpr(VarName, FieldName),
        CallExpr(VarName, Arguments)
      ),
      CallExpr(VarName, Arguments(String))
    )
  ),
  BinaryExpr(
    BinaryExpr(String, ArithmeticOp, IndexExpr(VarName, Integer)),
    ArithmeticOp,
    String
  )
)

# Predicate

filter(0..9, {# % 2 == 0})
filter(tweets, {len(.Content) > 240})
filter(tweets, len(.Content) > 240)
filter(posts, {
  let post = #;
  any(.Comments, .Author == post.Author)
})

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      RangeExpr(Integer, Integer),
      Block(
        BinaryExpr(
          BinaryExpr(Pointer, ArithmeticOp, Integer),
          CompareOp,
          Integer
        )
      )
    )
  ),
  CallExpr(
    VarName,
    Arguments(
      VarName,
      Block(
        BinaryExpr(
          CallExpr(VarName, Arguments(PointerSelectorExpr(FieldName))),
          CompareOp,
          Integer
        )
      )
    )
  ),
  CallExpr(
    VarName,
    Arguments(
      VarName,
      BinaryExpr(
        CallExpr(VarName, Arguments(PointerSelectorExpr(FieldName))),
        CompareOp,
        Integer
      )
    )
  )
  CallExpr(
    VarName,
    Arguments(
      VarName,
      Block(
        Predicate(
          VarDecl(let, DefName, Pointer),
          CallExpr(
            VarName,
            Arguments(
              PointerSelectorExpr(FieldName),
              BinaryExpr(
                PointerSelectorExpr(FieldName),
                CompareOp,
                SelectorExpr(VarName, FieldName)
              )
            )
          )
        )
      )
    )
  ),
)
