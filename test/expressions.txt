# Call expressions

upper("hello")

==>

Expr(CallExpr(VarName, Arguments(String)))

# Call with predicate expression

filter(0..9, {
  # % 2 == 0
})

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      RangeExpr(Integer, Integer),
      Block(
        BinaryExpr(
          BinaryExpr(Pointer, ArithmeticOp, Integer),
          CompareOp,
          Integer
        )
      )
    )
  )
)

# Nested call expressions

a(b(c(d)))

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      CallExpr(
        VarName,
        Arguments(
          CallExpr(
            VarName,
            Arguments(VarName)
          )
        )
      )
    )
  )
)

# Call with omitted pointer

filter(tweets, {len(.Content) > 240})

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      VarName,
      Block(
        BinaryExpr(
          CallExpr(
            VarName,
            Arguments(PointerSelectorExpr(FieldName))
          ),
          CompareOp,
          Integer
        )
      )
    )
  )
)

# Call without predicate

filter(tweets, let content = .Content; len(content) > 240)

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      VarName,
      Predicate(
        VarDecl(let, DefName, PointerSelectorExpr(FieldName)),
        BinaryExpr(
          CallExpr(VarName, Arguments(VarName)),
          CompareOp,
          Integer
        )
      )
    )
  )
)

# Call with use different pointers

reduce(1..9, #acc + # + #index, 0)

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      RangeExpr(Integer, Integer),
      BinaryExpr(
        BinaryExpr(
          Pointer,
          ArithmeticOp,
          Pointer
        ),
        ArithmeticOp,
        Pointer
      ),
      Integer
    )
  )
)

# Call sum of functions

float(.Passengers.Adults) + float(.Passengers.Children)

==>

Expr(
  BinaryExpr(
    CallExpr(
      VarName,
      Arguments(SelectorExpr(PointerSelectorExpr(FieldName), FieldName))
    ),
    ArithmeticOp,
    CallExpr(
      VarName,
      Arguments(SelectorExpr(PointerSelectorExpr(FieldName), FieldName))
    )
  )
)

# Call method of object

sum(Flights, .Durations.Seconds())

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      VarName,
      CallExpr(
        SelectorExpr(PointerSelectorExpr(FieldName), FieldName),
        Arguments()
      )
    )
  )
)

# Call method with array

count([hour not in 3..7, hour in 4..6])

==>

Expr(
  CallExpr(
    VarName,
    Arguments(
      Array(
        BinaryExpr(
          VarName,
          CompareOp(not, in),
          RangeExpr(Integer, Integer)
        ),
        BinaryExpr(
          VarName,
          CompareOp(in),
          RangeExpr(Integer, Integer)
        )
      )
    )
  )
)

# Call method with array and predicate

1..a

==>

Expr(RangeExpr(Integer, VarName))